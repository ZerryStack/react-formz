import { useRef } from "react";
import uuid from "react-uuid";
import logger from "../logger";
import { useFormz, formzStore } from "../store";
import { FormzValues } from "../types/form";
import useComponentDidMount from "./useComponentDidMount";

/**
 * Creates a unique id for a form and adds that id to the form store.
 * @param name The form name.
 * @param initialValues The initial values for the form.
 * @param existingId An existingId for the form if the id was already generated by another actor.
 */
function useFormId(
  name: string | undefined = undefined,
  initialValues: FormzValues,
  existingId: string | undefined = undefined
) {
  const idRef = useRef<string | undefined>(name || existingId);

  if (!idRef.current) {
    idRef.current = uuid();
  }

  const { current: id } = idRef;

  useComponentDidMount(() => {
    const { addForm, removeForm, forms } = formzStore.getState();

    addForm(id, initialValues);

    return function useFormIdCleanup() {
      const form = useFormz.getState().forms[id];

      if (form) {
        logger.log(
          `${id}:`,
          `Removing form from the global store.`,
          useFormz.getState().forms[id]?.values
        );

        removeForm(id);
      }
    };
  });

  return id;
}

export default useFormId;
